import sys
import pefile
from PyQt6.QtWidgets import QApplication, QMainWindow, QTextEdit, QPushButton, QFileDialog, QVBoxLayout, QWidget, QLabel, QHBoxLayout
from PyQt6.QtCore import Qt


class BinaryAnalysisTool(QMainWindow):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("Binary Analysis Tool (PE Files)")
        self.setGeometry(100, 100, 800, 600)
        self.setStyleSheet("""
            QWidget {
                font-family: "Arial", sans-serif;
                background-color: #2e2e2e;
            }
            QTextEdit {
                background-color: #222222;
                color: #f0f0f0;
                border: 1px solid #444444;
                font-size: 14px;
                font-family: "Courier New", monospace;
                padding: 10px;
            }
            QPushButton {
                background-color: #555555;
                color: #f0f0f0;
                font-size: 14px;
                border-radius: 5px;
                padding: 8px;
            }
            QPushButton:hover {
                background-color: #777777;
            }
        """)

        # Main layout
        layout = QVBoxLayout()

        # File path display
        self.fileLabel = QLabel("No file selected", self)
        self.fileLabel.setStyleSheet("color: #f0f0f0; font-size: 16px;")
        layout.addWidget(self.fileLabel)

        # Text Edit for displaying result
        self.resultEdit = QTextEdit(self)
        self.resultEdit.setFontFamily("Courier New")
        self.resultEdit.setFontPointSize(12)
        self.resultEdit.setReadOnly(True)
        layout.addWidget(self.resultEdit)

        # Button Layout
        buttonLayout = QHBoxLayout()

        self.openButton = QPushButton("Open PE File", self)
        self.analyzeButton = QPushButton("Analyze", self)
        self.clearButton = QPushButton("Clear", self)

        buttonLayout.addWidget(self.openButton)
        buttonLayout.addWidget(self.analyzeButton)
        buttonLayout.addWidget(self.clearButton)

        layout.addLayout(buttonLayout)

        # Connect buttons to functions
        self.openButton.clicked.connect(self.open_file)
        self.analyzeButton.clicked.connect(self.analyze_file)
        self.clearButton.clicked.connect(self.clear_results)

        # Central widget
        centralWidget = QWidget(self)
        centralWidget.setLayout(layout)
        self.setCentralWidget(centralWidget)

        # File path variable
        self.file_path = None
        self.pe = None

    def open_file(self):
        """Open PE file."""
        file_path, _ = QFileDialog.getOpenFileName(self, "Open PE File")
        if file_path:
            self.fileLabel.setText(f"Selected file: {file_path}")
            self.file_path = file_path

    def analyze_file(self):
        """Analyze the PE file."""
        if not self.file_path:
            self.resultEdit.setText("Please select a file first.")
            return
        
        try:
            # Load the PE file using pefile
            self.pe = pefile.PE(self.file_path)

            result = f"Analyzing {self.file_path}\n\n"

            # General Information
            result += "== General Information ==\n"
            result += f"File Type: {'PE' if self.pe.is_exe() else 'Non-PE'}\n"
            result += f"File Size: {self.pe.FILE_HEADER.SizeOfOptionalHeader} bytes\n"
            result += f"Number of Sections: {len(self.pe.sections)}\n"

            # Sections
            result += "\n== Sections ==\n"
            for section in self.pe.sections:
                result += f"Section Name: {section.Name.decode().strip()}\n"
                result += f"  Virtual Size: {section.Misc_VirtualSize}\n"
                result += f"  Raw Size: {section.SizeOfRawData}\n"
                result += f"  Characteristics: {hex(section.Characteristics)}\n"
                result += "-" * 40 + "\n"

            # Imports (if any)
            result += "\n== Imports ==\n"
            if hasattr(self.pe, 'DIRECTORY_ENTRY_IMPORT'):
                for entry in self.pe.DIRECTORY_ENTRY_IMPORT:
                    result += f"Library: {entry.dll.decode()}\n"
                    for imp in entry.imports:
                        result += f"  Function: {imp.name.decode() if imp.name else 'Unknown'}\n"
                    result += "-" * 40 + "\n"
            else:
                result += "No imports found.\n"

            self.resultEdit.setText(result)

        except Exception as e:
            self.resultEdit.setText(f"Error analyzing file: {str(e)}")

    def clear_results(self):
        """Clear results and file selection."""
        self.resultEdit.clear()
        self.fileLabel.setText("No file selected")
        self.file_path = None


def main():
    app = QApplication(sys.argv)
    window = BinaryAnalysisTool()
    window.show()
    sys.exit(app.exec())

if __name__ == "__main__":
    main()
