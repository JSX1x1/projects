import sys
import yara
from PyQt6.QtWidgets import QApplication, QMainWindow, QTextEdit, QPushButton, QVBoxLayout, QWidget, QFileDialog, QHBoxLayout, QLabel
from PyQt6.QtCore import Qt


class MalwareSignatureDetector(QMainWindow):
    def __init__(self):
        super().__init__()

        # Window setup
        self.setWindowTitle("Malware Signature Detection Tool")
        self.setGeometry(100, 100, 800, 600)
        self.setStyleSheet("""
            QWidget {
                font-family: "Arial", sans-serif;
                background-color: #2e2e2e;
            }
            QTextEdit {
                background-color: #222222;
                color: #f0f0f0;
                border: 1px solid #444444;
                font-size: 14px;
                font-family: "Courier New", monospace;
                padding: 10px;
            }
            QPushButton {
                background-color: #555555;
                color: #f0f0f0;
                font-size: 14px;
                border-radius: 5px;
                padding: 8px;
            }
            QPushButton:hover {
                background-color: #777777;
            }
        """)

        # Main layout
        layout = QVBoxLayout()

        # File path display
        self.fileLabel = QLabel("No file selected", self)
        self.fileLabel.setStyleSheet("color: #f0f0f0; font-size: 16px;")
        layout.addWidget(self.fileLabel)

        # Text Edit for displaying result
        self.resultEdit = QTextEdit(self)
        self.resultEdit.setFontFamily("Courier New")
        self.resultEdit.setFontPointSize(12)
        self.resultEdit.setReadOnly(True)
        layout.addWidget(self.resultEdit)

        # Button Layout
        buttonLayout = QHBoxLayout()

        self.openButton = QPushButton("Open File", self)
        self.detectButton = QPushButton("Detect Malware", self)
        self.clearButton = QPushButton("Clear Results", self)

        buttonLayout.addWidget(self.openButton)
        buttonLayout.addWidget(self.detectButton)
        buttonLayout.addWidget(self.clearButton)

        layout.addLayout(buttonLayout)

        # Connect buttons to functions
        self.openButton.clicked.connect(self.open_file)
        self.detectButton.clicked.connect(self.detect_malware)
        self.clearButton.clicked.connect(self.clear_results)

        # Central widget
        centralWidget = QWidget(self)
        centralWidget.setLayout(layout)
        self.setCentralWidget(centralWidget)

        # YARA rule definition
        self.yara_rules = self.load_yara_rules()

    def open_file(self):
        """Open file dialog to select a file."""
        file_path, _ = QFileDialog.getOpenFileName(self, "Open File")
        if file_path:
            self.fileLabel.setText(f"Selected file: {file_path}")
            self.file_path = file_path

    def load_yara_rules(self):
        """Load YARA rules from a predefined set."""
        rules = yara.compile(source="""
        rule Example_Malware_Signature {
            meta:
                description = "Detects example malware based on byte signature"
                author = "Your Name"
                date = "2025-04-07"
            
            strings:
                $malicious_string1 = "malicious_behavior" wide
                $malicious_string2 = { E8 34 56 78 90 }
            
            condition:
                $malicious_string1 or $malicious_string2
        }
        """)
        return rules

    def detect_malware(self):
        """Detect malware based on YARA rules."""
        if not hasattr(self, "file_path"):
            self.resultEdit.setText("Please select a file first!")
            return

        try:
            # Apply YARA rule to the selected file
            matches = self.yara_rules.match(self.file_path)
            if matches:
                result = "Malware Detected! Matching rules:\n"
                for match in matches:
                    result += f"Rule: {match.rule}\n"
            else:
                result = "No malware detected based on current rules."
        except Exception as e:
            result = f"Error during detection: {str(e)}"

        self.resultEdit.setText(result)

    def clear_results(self):
        """Clear results and file selection."""
        self.resultEdit.clear()
        self.fileLabel.setText("No file selected")
        self.file_path = None


def main():
    app = QApplication(sys.argv)
    window = MalwareSignatureDetector()
    window.show()
    sys.exit(app.exec())

if __name__ == "__main__":
    main()
