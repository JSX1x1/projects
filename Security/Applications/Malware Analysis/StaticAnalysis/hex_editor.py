import sys
from PyQt6.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget, QTextEdit, QPushButton, QFileDialog, QHBoxLayout
from PyQt6.QtGui import QFont
from PyQt6.QtCore import Qt

class HexEditor(QMainWindow):
    def __init__(self):
        super().__init__()
        
        # Window setup
        self.setWindowTitle('Hex Editor')
        self.setGeometry(100, 100, 800, 600)
        self.setStyleSheet("""
            QWidget {
                font-family: "Arial", sans-serif;
                background-color: #2e2e2e;
            }
            QTextEdit {
                background-color: #222222;
                color: #f0f0f0;
                border: 1px solid #444444;
                font-size: 14px;
                font-family: "Courier New", monospace;
                padding: 10px;
            }
            QPushButton {
                background-color: #555555;
                color: #f0f0f0;
                font-size: 14px;
                border-radius: 5px;
                padding: 8px;
            }
            QPushButton:hover {
                background-color: #777777;
            }
        """)

        # Main layout
        layout = QVBoxLayout()

        # Hex Editor Area
        self.hexEdit = QTextEdit(self)
        self.hexEdit.setFont(QFont('Courier New', 10))
        self.hexEdit.setReadOnly(False)  # Make it editable
        layout.addWidget(self.hexEdit)

        # Button Layout
        buttonLayout = QHBoxLayout()
        self.openButton = QPushButton('Open File', self)
        self.saveButton = QPushButton('Save File', self)
        
        buttonLayout.addWidget(self.openButton)
        buttonLayout.addWidget(self.saveButton)

        layout.addLayout(buttonLayout)

        # Connect buttons to functions
        self.openButton.clicked.connect(self.open_file)
        self.saveButton.clicked.connect(self.save_file)

        # Central widget
        centralWidget = QWidget(self)
        centralWidget.setLayout(layout)
        self.setCentralWidget(centralWidget)

    def open_file(self):
        # Open file dialog to select file
        file_path, _ = QFileDialog.getOpenFileName(self, 'Open File')
        if file_path:
            self.load_file(file_path)

    def save_file(self):
        # Open save file dialog
        file_path, _ = QFileDialog.getSaveFileName(self, 'Save File')
        if file_path:
            self.save_file_content(file_path)

    def load_file(self, file_path):
        try:
            # Read file as binary
            with open(file_path, 'rb') as file:
                file_data = file.read()
                hex_data = self.bytes_to_hex(file_data)
                self.hexEdit.setText(hex_data)
        except Exception as e:
            print(f"Error reading file: {e}")

    def save_file_content(self, file_path):
        try:
            # Get the hex data from the text editor and convert to bytes
            hex_data = self.hexEdit.toPlainText()
            byte_data = self.hex_to_bytes(hex_data)
            
            with open(file_path, 'wb') as file:
                file.write(byte_data)
        except Exception as e:
            print(f"Error saving file: {e}")

    def bytes_to_hex(self, byte_data):
        """Convert bytes to formatted hex string"""
        hex_str = ''
        for i in range(0, len(byte_data), 16):
            hex_line = byte_data[i:i+16]
            hex_str += ' '.join(f'{b:02X}' for b in hex_line) + '\n'
        return hex_str

    def hex_to_bytes(self, hex_str):
        """Convert hex string back to bytes"""
        hex_str = hex_str.replace(' ', '').replace('\n', '')
        return bytes.fromhex(hex_str)


def main():
    app = QApplication(sys.argv)
    editor = HexEditor()
    editor.show()
    sys.exit(app.exec())

if __name__ == '__main__':
    main()
