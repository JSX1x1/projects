import sys
import hashlib
import os
from PyQt6.QtWidgets import QApplication, QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton, QLineEdit, QFileDialog
from PyQt6.QtCore import Qt

class HashingApp(QWidget):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("Malware Sample Hashing Tool")
        self.setGeometry(100, 100, 600, 200)

        # Initialize UI components
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout()

        # File Selection
        self.file_label = QLabel("No file selected", self)
        self.file_label.setAlignment(Qt.AlignmentFlag.AlignCenter)

        self.select_file_button = QPushButton("Select Malware Sample", self)
        self.select_file_button.clicked.connect(self.select_file)

        # Hashing Algorithms
        self.hash_label = QLabel("Select Hashing Algorithm", self)
        self.hash_type = QLineEdit(self)
        self.hash_type.setPlaceholderText("SHA256")

        # Display Hash Value
        self.hash_value_label = QLabel("Hash Value:", self)
        self.hash_value = QLineEdit(self)
        self.hash_value.setReadOnly(True)

        # Compute Button
        self.compute_button = QPushButton("Compute Hash", self)
        self.compute_button.clicked.connect(self.compute_hash)

        # Layouts
        layout.addWidget(self.file_label)
        layout.addWidget(self.select_file_button)
        layout.addWidget(self.hash_label)
        layout.addWidget(self.hash_type)
        layout.addWidget(self.hash_value_label)
        layout.addWidget(self.hash_value)
        layout.addWidget(self.compute_button)

        self.setLayout(layout)

    def select_file(self):
        # Open file dialog to select a file
        file, _ = QFileDialog.getOpenFileName(self, "Select Malware Sample File")
        if file:
            self.file_label.setText(f"Selected File: {file}")
            self.selected_file = file

    def compute_hash(self):
        # Get the hash algorithm
        hash_algorithm = self.hash_type.text().strip().lower()

        # Validate file selection and hash algorithm
        if not hasattr(self, 'selected_file'):
            self.hash_value.setText("Error: No file selected")
            return

        if hash_algorithm not in ['md5', 'sha1', 'sha256']:
            self.hash_value.setText("Error: Unsupported hash algorithm")
            return

        # Perform hashing
        try:
            hash_func = getattr(hashlib, hash_algorithm)
            file_hash = self.compute_file_hash(self.selected_file, hash_func)
            self.hash_value.setText(file_hash)
        except Exception as e:
            self.hash_value.setText(f"Error: {str(e)}")

    def compute_file_hash(self, file_path, hash_func):
        """Computes the hash of a given file."""
        hash_obj = hash_func()
        try:
            with open(file_path, "rb") as f:
                while chunk := f.read(8192):
                    hash_obj.update(chunk)
            return hash_obj.hexdigest()
        except Exception as e:
            return f"Error reading file: {str(e)}"

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = HashingApp()
    window.show()
    sys.exit(app.exec())
