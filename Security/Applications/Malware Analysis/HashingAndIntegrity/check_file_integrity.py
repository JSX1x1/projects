import hashlib
import argparse
import os

# Function to compute the hash of a file
def compute_file_hash(file_path, hash_algorithm='sha256'):
    """Computes the hash of a file using the specified hashing algorithm."""
    try:
        hash_func = getattr(hashlib, hash_algorithm)()
    except AttributeError:
        raise ValueError(f"Unsupported hash algorithm: {hash_algorithm}")
    
    # Open the file in binary mode and compute its hash
    with open(file_path, 'rb') as f:
        while chunk := f.read(8192):
            hash_func.update(chunk)
    
    return hash_func.hexdigest()

# Function to verify file integrity by comparing the computed hash with the expected hash
def verify_file_integrity(file_path, expected_hash, hash_algorithm='sha256'):
    """Verifies the integrity of a file by comparing the computed hash with the expected hash."""
    computed_hash = compute_file_hash(file_path, hash_algorithm)
    
    if computed_hash == expected_hash:
        print(f"Integrity check passed. The file is intact.")
    else:
        print(f"Integrity check failed. The file is corrupt or tampered with.")
        print(f"Computed Hash: {computed_hash}")
        print(f"Expected Hash: {expected_hash}")

# CLI setup
def main():
    parser = argparse.ArgumentParser(description="File Integrity Check Tool")
    parser.add_argument("file", help="Path to the file to check")
    parser.add_argument("expected_hash", help="Expected hash value (e.g., SHA256)")
    parser.add_argument("-a", "--algorithm", default="sha256", help="Hashing algorithm to use (default: sha256)")

    args = parser.parse_args()

    if not os.path.isfile(args.file):
        print(f"Error: The file '{args.file}' does not exist or is not a valid file.")
        return

    verify_file_integrity(args.file, args.expected_hash, args.algorithm)

if __name__ == "__main__":
    main()
