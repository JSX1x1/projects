import base64
import argparse
import binascii
from Crypto.Cipher import XOR
import zlib

# Function to decode Base64 encoded data
def decode_base64(encoded_data):
    try:
        return base64.b64decode(encoded_data)
    except Exception as e:
        return f"Error decoding Base64: {e}"

# Function to perform XOR decryption
def xor_decrypt(data, key):
    try:
        cipher = XOR.new(key)
        return cipher.decrypt(data)
    except Exception as e:
        return f"Error XOR decryption: {e}"

# Function to decompress data using zlib (for compressed obfuscation)
def decompress_zlib(data):
    try:
        return zlib.decompress(data)
    except Exception as e:
        return f"Error decompressing zlib: {e}"

# Function to handle the file reading and calling deobfuscation techniques
def process_file(file_path, key=None, decode_base64_flag=False, xor_flag=False, decompress_flag=False):
    try:
        with open(file_path, 'rb') as f:
            encoded_data = f.read()

        # Apply deobfuscation methods based on user flags
        if decode_base64_flag:
            print("Attempting to decode Base64...")
            decoded_data = decode_base64(encoded_data)
            if isinstance(decoded_data, bytes):
                print(f"Decoded Base64: {decoded_data[:100]}...")  # Show first 100 bytes
            else:
                print(decoded_data)

        if xor_flag and key:
            print("Attempting XOR decryption...")
            decrypted_data = xor_decrypt(encoded_data, key.encode('utf-8'))
            if isinstance(decrypted_data, bytes):
                print(f"Decrypted XOR: {decrypted_data[:100]}...")
            else:
                print(decrypted_data)

        if decompress_flag:
            print("Attempting to decompress using zlib...")
            decompressed_data = decompress_zlib(encoded_data)
            if isinstance(decompressed_data, bytes):
                print(f"Decompressed zlib: {decompressed_data[:100]}...")
            else:
                print(decompressed_data)

    except Exception as e:
        print(f"Error processing file: {e}")

# CLI setup
def main():
    parser = argparse.ArgumentParser(description="Malware Deobfuscation Tool")
    parser.add_argument("file", help="Path to the malware file to deobfuscate")
    parser.add_argument("-b", "--base64", action="store_true", help="Decode Base64 encoding")
    parser.add_argument("-x", "--xor", action="store_true", help="Attempt XOR decryption")
    parser.add_argument("-k", "--key", type=str, help="XOR key for decryption (required for XOR)")
    parser.add_argument("-z", "--zlib", action="store_true", help="Decompress zlib data")

    args = parser.parse_args()

    if args.xor and not args.key:
        print("Error: XOR key is required for XOR decryption.")
        return

    process_file(
        file_path=args.file,
        key=args.key,
        decode_base64_flag=args.base64,
        xor_flag=args.xor,
        decompress_flag=args.zlib
    )

if __name__ == "__main__":
    main()
