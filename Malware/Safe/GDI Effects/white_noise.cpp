#include <windows.h> // Needed for GDI Manipulation
#include <iostream>
#include <random>
#include <thread>

// DO NOT USE FOR MALICOUS INTENDS. THE OWNER IS HOT RESPONSIBLE FOR ANY DAMAGE THE USER IS DOING TO OTHERS!


// Function to generate a random color for the noise effect
COLORREF getRandomColor() {
    // Return a random color (RGB)
    return RGB(rand() % 256, rand() % 256, rand() % 256);
}

// Function to generate noise across the screen for 10 seconds
void generateWhiteNoiseChaos(HWND hwnd) {
    // Get the device context of the screen
    HDC hdc = GetDC(hwnd);

    // Get screen width and height
    int screenWidth = GetSystemMetrics(SM_CXSCREEN);
    int screenHeight = GetSystemMetrics(SM_CYSCREEN);

    // Create a random number generator for the noise
    std::random_device rd;
    std::mt19937 rng(rd());
    std::uniform_int_distribution<int> dist(0, 255);

    // Duration of the chaos effect (10 seconds)
    DWORD endTime = GetTickCount() + 10000;

    // Loop until 10 seconds have passed
    while (GetTickCount() < endTime) {
        for (int y = 0; y < screenHeight; ++y) {
            for (int x = 0; x < screenWidth; ++x) {
                // Random color for each pixel to simulate white noise
                COLORREF color = getRandomColor();
                SetPixel(hdc, x, y, color);
            }
        }
    }

    // Release the device context
    ReleaseDC(hwnd, hdc);
}

int main() {
    // Get the handle to the desktop window (the entire screen)
    HWND hwnd = GetDesktopWindow();

    // Set the process priority to high so that the noise effect runs smoothly
    SetPriorityClass(GetCurrentProcess(), HIGH_PRIORITY_CLASS);

    // Start generating white noise chaos
    std::cout << "Starting white noise chaos for 10 seconds..." << std::endl;
    generateWhiteNoiseChaos(hwnd);

    std::cout << "Noise chaos finished!" << std::endl;
    return 0;
}
